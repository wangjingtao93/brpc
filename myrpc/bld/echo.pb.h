// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: echo.proto

#ifndef PROTOBUF_echo_2eproto__INCLUDED
#define PROTOBUF_echo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace example {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_echo_2eproto();
void protobuf_AssignDesc_echo_2eproto();
void protobuf_ShutdownFile_echo_2eproto();

class MyRequest;
class MyResponse;

// ===================================================================

class MyRequest : public ::google::protobuf::Message {
 public:
  MyRequest();
  virtual ~MyRequest();

  MyRequest(const MyRequest& from);

  inline MyRequest& operator=(const MyRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MyRequest& default_instance();

  void Swap(MyRequest* other);

  // implements Message ----------------------------------------------

  MyRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MyRequest& from);
  void MergeFrom(const MyRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string Reqmessage = 1;
  inline bool has_reqmessage() const;
  inline void clear_reqmessage();
  static const int kReqmessageFieldNumber = 1;
  inline const ::std::string& reqmessage() const;
  inline void set_reqmessage(const ::std::string& value);
  inline void set_reqmessage(const char* value);
  inline void set_reqmessage(const char* value, size_t size);
  inline ::std::string* mutable_reqmessage();
  inline ::std::string* release_reqmessage();
  inline void set_allocated_reqmessage(::std::string* reqmessage);

  // @@protoc_insertion_point(class_scope:example.MyRequest)
 private:
  inline void set_has_reqmessage();
  inline void clear_has_reqmessage();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* reqmessage_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_echo_2eproto();
  friend void protobuf_AssignDesc_echo_2eproto();
  friend void protobuf_ShutdownFile_echo_2eproto();

  void InitAsDefaultInstance();
  static MyRequest* default_instance_;
};
// -------------------------------------------------------------------

class MyResponse : public ::google::protobuf::Message {
 public:
  MyResponse();
  virtual ~MyResponse();

  MyResponse(const MyResponse& from);

  inline MyResponse& operator=(const MyResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MyResponse& default_instance();

  void Swap(MyResponse* other);

  // implements Message ----------------------------------------------

  MyResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MyResponse& from);
  void MergeFrom(const MyResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string Resmessage = 1;
  inline bool has_resmessage() const;
  inline void clear_resmessage();
  static const int kResmessageFieldNumber = 1;
  inline const ::std::string& resmessage() const;
  inline void set_resmessage(const ::std::string& value);
  inline void set_resmessage(const char* value);
  inline void set_resmessage(const char* value, size_t size);
  inline ::std::string* mutable_resmessage();
  inline ::std::string* release_resmessage();
  inline void set_allocated_resmessage(::std::string* resmessage);

  // @@protoc_insertion_point(class_scope:example.MyResponse)
 private:
  inline void set_has_resmessage();
  inline void clear_has_resmessage();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* resmessage_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_echo_2eproto();
  friend void protobuf_AssignDesc_echo_2eproto();
  friend void protobuf_ShutdownFile_echo_2eproto();

  void InitAsDefaultInstance();
  static MyResponse* default_instance_;
};
// ===================================================================

class MySevice_Stub;

class MySevice : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline MySevice() {};
 public:
  virtual ~MySevice();

  typedef MySevice_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void MyEchoSerTest(::google::protobuf::RpcController* controller,
                       const ::example::MyRequest* request,
                       ::example::MyResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(MySevice);
};

class MySevice_Stub : public MySevice {
 public:
  MySevice_Stub(::google::protobuf::RpcChannel* channel);
  MySevice_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~MySevice_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements MySevice ------------------------------------------

  void MyEchoSerTest(::google::protobuf::RpcController* controller,
                       const ::example::MyRequest* request,
                       ::example::MyResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(MySevice_Stub);
};


// ===================================================================


// ===================================================================

// MyRequest

// required string Reqmessage = 1;
inline bool MyRequest::has_reqmessage() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MyRequest::set_has_reqmessage() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MyRequest::clear_has_reqmessage() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MyRequest::clear_reqmessage() {
  if (reqmessage_ != &::google::protobuf::internal::kEmptyString) {
    reqmessage_->clear();
  }
  clear_has_reqmessage();
}
inline const ::std::string& MyRequest::reqmessage() const {
  return *reqmessage_;
}
inline void MyRequest::set_reqmessage(const ::std::string& value) {
  set_has_reqmessage();
  if (reqmessage_ == &::google::protobuf::internal::kEmptyString) {
    reqmessage_ = new ::std::string;
  }
  reqmessage_->assign(value);
}
inline void MyRequest::set_reqmessage(const char* value) {
  set_has_reqmessage();
  if (reqmessage_ == &::google::protobuf::internal::kEmptyString) {
    reqmessage_ = new ::std::string;
  }
  reqmessage_->assign(value);
}
inline void MyRequest::set_reqmessage(const char* value, size_t size) {
  set_has_reqmessage();
  if (reqmessage_ == &::google::protobuf::internal::kEmptyString) {
    reqmessage_ = new ::std::string;
  }
  reqmessage_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MyRequest::mutable_reqmessage() {
  set_has_reqmessage();
  if (reqmessage_ == &::google::protobuf::internal::kEmptyString) {
    reqmessage_ = new ::std::string;
  }
  return reqmessage_;
}
inline ::std::string* MyRequest::release_reqmessage() {
  clear_has_reqmessage();
  if (reqmessage_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = reqmessage_;
    reqmessage_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MyRequest::set_allocated_reqmessage(::std::string* reqmessage) {
  if (reqmessage_ != &::google::protobuf::internal::kEmptyString) {
    delete reqmessage_;
  }
  if (reqmessage) {
    set_has_reqmessage();
    reqmessage_ = reqmessage;
  } else {
    clear_has_reqmessage();
    reqmessage_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// MyResponse

// required string Resmessage = 1;
inline bool MyResponse::has_resmessage() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MyResponse::set_has_resmessage() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MyResponse::clear_has_resmessage() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MyResponse::clear_resmessage() {
  if (resmessage_ != &::google::protobuf::internal::kEmptyString) {
    resmessage_->clear();
  }
  clear_has_resmessage();
}
inline const ::std::string& MyResponse::resmessage() const {
  return *resmessage_;
}
inline void MyResponse::set_resmessage(const ::std::string& value) {
  set_has_resmessage();
  if (resmessage_ == &::google::protobuf::internal::kEmptyString) {
    resmessage_ = new ::std::string;
  }
  resmessage_->assign(value);
}
inline void MyResponse::set_resmessage(const char* value) {
  set_has_resmessage();
  if (resmessage_ == &::google::protobuf::internal::kEmptyString) {
    resmessage_ = new ::std::string;
  }
  resmessage_->assign(value);
}
inline void MyResponse::set_resmessage(const char* value, size_t size) {
  set_has_resmessage();
  if (resmessage_ == &::google::protobuf::internal::kEmptyString) {
    resmessage_ = new ::std::string;
  }
  resmessage_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MyResponse::mutable_resmessage() {
  set_has_resmessage();
  if (resmessage_ == &::google::protobuf::internal::kEmptyString) {
    resmessage_ = new ::std::string;
  }
  return resmessage_;
}
inline ::std::string* MyResponse::release_resmessage() {
  clear_has_resmessage();
  if (resmessage_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = resmessage_;
    resmessage_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MyResponse::set_allocated_resmessage(::std::string* resmessage) {
  if (resmessage_ != &::google::protobuf::internal::kEmptyString) {
    delete resmessage_;
  }
  if (resmessage) {
    set_has_resmessage();
    resmessage_ = resmessage;
  } else {
    clear_has_resmessage();
    resmessage_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace example

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_echo_2eproto__INCLUDED
