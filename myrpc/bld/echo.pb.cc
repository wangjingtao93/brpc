// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: echo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "echo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace example {

namespace {

const ::google::protobuf::Descriptor* MyRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MyRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MyResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MyResponse_reflection_ = NULL;
const ::google::protobuf::ServiceDescriptor* MySevice_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_echo_2eproto() {
  protobuf_AddDesc_echo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "echo.proto");
  GOOGLE_CHECK(file != NULL);
  MyRequest_descriptor_ = file->message_type(0);
  static const int MyRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyRequest, reqmessage_),
  };
  MyRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MyRequest_descriptor_,
      MyRequest::default_instance_,
      MyRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MyRequest));
  MyResponse_descriptor_ = file->message_type(1);
  static const int MyResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyResponse, resmessage_),
  };
  MyResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MyResponse_descriptor_,
      MyResponse::default_instance_,
      MyResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MyResponse));
  MySevice_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_echo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MyRequest_descriptor_, &MyRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MyResponse_descriptor_, &MyResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_echo_2eproto() {
  delete MyRequest::default_instance_;
  delete MyRequest_reflection_;
  delete MyResponse::default_instance_;
  delete MyResponse_reflection_;
}

void protobuf_AddDesc_echo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\necho.proto\022\007example\"\037\n\tMyRequest\022\022\n\nRe"
    "qmessage\030\001 \002(\t\" \n\nMyResponse\022\022\n\nResmessa"
    "ge\030\001 \002(\t2D\n\010MySevice\0228\n\rMyEchoSerTest\022\022."
    "example.MyRequest\032\023.example.MyResponseB\003"
    "\200\001\001", 163);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "echo.proto", &protobuf_RegisterTypes);
  MyRequest::default_instance_ = new MyRequest();
  MyResponse::default_instance_ = new MyResponse();
  MyRequest::default_instance_->InitAsDefaultInstance();
  MyResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_echo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_echo_2eproto {
  StaticDescriptorInitializer_echo_2eproto() {
    protobuf_AddDesc_echo_2eproto();
  }
} static_descriptor_initializer_echo_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int MyRequest::kReqmessageFieldNumber;
#endif  // !_MSC_VER

MyRequest::MyRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MyRequest::InitAsDefaultInstance() {
}

MyRequest::MyRequest(const MyRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MyRequest::SharedCtor() {
  _cached_size_ = 0;
  reqmessage_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MyRequest::~MyRequest() {
  SharedDtor();
}

void MyRequest::SharedDtor() {
  if (reqmessage_ != &::google::protobuf::internal::kEmptyString) {
    delete reqmessage_;
  }
  if (this != default_instance_) {
  }
}

void MyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MyRequest_descriptor_;
}

const MyRequest& MyRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_echo_2eproto();
  return *default_instance_;
}

MyRequest* MyRequest::default_instance_ = NULL;

MyRequest* MyRequest::New() const {
  return new MyRequest;
}

void MyRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_reqmessage()) {
      if (reqmessage_ != &::google::protobuf::internal::kEmptyString) {
        reqmessage_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Reqmessage = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reqmessage()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->reqmessage().data(), this->reqmessage().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string Reqmessage = 1;
  if (has_reqmessage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reqmessage().data(), this->reqmessage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->reqmessage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MyRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string Reqmessage = 1;
  if (has_reqmessage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reqmessage().data(), this->reqmessage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->reqmessage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MyRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Reqmessage = 1;
    if (has_reqmessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reqmessage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MyRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MyRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MyRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MyRequest::MergeFrom(const MyRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reqmessage()) {
      set_reqmessage(from.reqmessage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MyRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MyRequest::CopyFrom(const MyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MyRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MyRequest::Swap(MyRequest* other) {
  if (other != this) {
    std::swap(reqmessage_, other->reqmessage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MyRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MyRequest_descriptor_;
  metadata.reflection = MyRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MyResponse::kResmessageFieldNumber;
#endif  // !_MSC_VER

MyResponse::MyResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MyResponse::InitAsDefaultInstance() {
}

MyResponse::MyResponse(const MyResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MyResponse::SharedCtor() {
  _cached_size_ = 0;
  resmessage_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MyResponse::~MyResponse() {
  SharedDtor();
}

void MyResponse::SharedDtor() {
  if (resmessage_ != &::google::protobuf::internal::kEmptyString) {
    delete resmessage_;
  }
  if (this != default_instance_) {
  }
}

void MyResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MyResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MyResponse_descriptor_;
}

const MyResponse& MyResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_echo_2eproto();
  return *default_instance_;
}

MyResponse* MyResponse::default_instance_ = NULL;

MyResponse* MyResponse::New() const {
  return new MyResponse;
}

void MyResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_resmessage()) {
      if (resmessage_ != &::google::protobuf::internal::kEmptyString) {
        resmessage_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Resmessage = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resmessage()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->resmessage().data(), this->resmessage().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string Resmessage = 1;
  if (has_resmessage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resmessage().data(), this->resmessage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->resmessage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MyResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string Resmessage = 1;
  if (has_resmessage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resmessage().data(), this->resmessage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->resmessage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MyResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Resmessage = 1;
    if (has_resmessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resmessage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MyResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MyResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MyResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MyResponse::MergeFrom(const MyResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_resmessage()) {
      set_resmessage(from.resmessage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MyResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MyResponse::CopyFrom(const MyResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MyResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MyResponse::Swap(MyResponse* other) {
  if (other != this) {
    std::swap(resmessage_, other->resmessage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MyResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MyResponse_descriptor_;
  metadata.reflection = MyResponse_reflection_;
  return metadata;
}


// ===================================================================

MySevice::~MySevice() {}

const ::google::protobuf::ServiceDescriptor* MySevice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MySevice_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* MySevice::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return MySevice_descriptor_;
}

void MySevice::MyEchoSerTest(::google::protobuf::RpcController* controller,
                         const ::example::MyRequest*,
                         ::example::MyResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method MyEchoSerTest() not implemented.");
  done->Run();
}

void MySevice::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), MySevice_descriptor_);
  switch(method->index()) {
    case 0:
      MyEchoSerTest(controller,
             ::google::protobuf::down_cast<const ::example::MyRequest*>(request),
             ::google::protobuf::down_cast< ::example::MyResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& MySevice::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::example::MyRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& MySevice::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::example::MyResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

MySevice_Stub::MySevice_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
MySevice_Stub::MySevice_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
MySevice_Stub::~MySevice_Stub() {
  if (owns_channel_) delete channel_;
}

void MySevice_Stub::MyEchoSerTest(::google::protobuf::RpcController* controller,
                              const ::example::MyRequest* request,
                              ::example::MyResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace example

// @@protoc_insertion_point(global_scope)
